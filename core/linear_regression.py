import pandas as pd
import matplotlib.pyplot  as plt
import seaborn as sns
import statsmodels.api as sm
import numpy as  np
from base_classes import Regresion

class MultipleLinearRegression(Regresion):
    def __init__(self, X: pd.DataFrame, y: pd.Series, add_polynomial_terms: bool = False):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞ —Ç—Ä–µ–Ω—É—î –º–æ–¥–µ–ª—å –º–Ω–æ–∂–∏–Ω–Ω–æ—ó –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.
        –Ø–∫—â–æ add_polynomial_terms = True ‚Äî –¥–æ–¥–∞—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ñ –æ–∑–Ω–∞–∫–∏.
        """
        if not isinstance(X, pd.DataFrame):
            raise TypeError("X –º–∞—î –±—É—Ç–∏ DataFrame")
        if not isinstance(y, (pd.Series, pd.DataFrame)):
            raise TypeError("y –º–∞—î –±—É—Ç–∏ Series –∞–±–æ DataFrame –∑ –æ–¥–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º")

        self.y = y.squeeze()
        self.feature_names = list(X.columns)

        # –î–æ–¥–∞–º–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ñ –æ–∑–Ω–∞–∫–∏, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if add_polynomial_terms:
            for col in self.feature_names:
                X[f"{col}_squared"] = X[col] ** 2

        self.X = sm.add_constant(X)
        self.model = sm.OLS(self.y, self.X).fit()
        self.used_poly = add_polynomial_terms

    def summary(self):
        return self.model.summary()

    def predict(self, new_X: pd.DataFrame) -> pd.Series:
        if self.used_poly:
            for col in self.feature_names:
                new_X[f"{col}_squared"] = new_X[col] ** 2
        new_X = sm.add_constant(new_X)
        return self.model.predict(new_X)

    def coefficients(self) -> pd.DataFrame:
        df = pd.DataFrame({
            "Coef.": self.model.params,
            "P-value": self.model.pvalues
        })

        def interpret_row(row):
            coef = abs(row["Coef."])
            pval = row["P-value"]

            if coef > 1.0:
                strength = "üî¥ –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π"
            elif coef > 0.5:
                strength = "üü† –°–∏–ª—å–Ω–∏–π"
            elif coef > 0.2:
                strength = "üü° –ü–æ–º—ñ—Ä–Ω–∏–π"
            elif coef > 0.05:
                strength = "üîµ –°–ª–∞–±–∫–∏–π"
            else:
                strength = "‚ö™ –ú–∞–π–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

            if pval < 0.01:
                significance = "üî• –ù–∞–¥—ñ–π–Ω–∏–π"
            elif pval < 0.05:
                significance = "‚úÖ –ó–Ω–∞—á—É—â–∏–π"
            elif pval < 0.1:
                significance = "‚ö†Ô∏è –ù–∞ –º–µ–∂—ñ"
            else:
                significance = "‚ùå –ù–µ–Ω–∞–¥—ñ–π–Ω–∏–π"

            return pd.Series([strength, significance])

        df[["–°–∏–ª–∞ –≤–ø–ª–∏–≤—É", "–ó–Ω–∞—á—É—â—ñ—Å—Ç—å"]] = df.apply(interpret_row, axis=1)
        return df.round(4)

    def r_squared(self) -> float:
        return round(self.model.rsquared, 4)

    def plot_residuals(self):
        residuals = self.model.resid
        fitted = self.model.fittedvalues
        plt.figure(figsize=(6, 4))
        plt.scatter(fitted, residuals, alpha=0.7)
        plt.axhline(0, color="red", linestyle="--")
        plt.xlabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        plt.ylabel("–ó–∞–ª–∏—à–∫–∏")
        plt.title("–ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–∏—à–∫—ñ–≤")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def plot_feature_relationship(self, feature_names):
        # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫, –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –π–æ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
        if isinstance(feature_names, str):
            feature_names = [feature_names]

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≤—Å—ñ –æ–∑–Ω–∞–∫–∏ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –¥–∞–Ω–∏—Ö
        for feature in feature_names:
            if feature not in self.X.columns:
                raise ValueError(f"–û–∑–Ω–∞–∫–∞ '{feature}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ X")

            # –í–∏–∫–ª—é—á–∞—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∑ –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—É
            X_plot = self.X.drop(columns="const", errors="ignore")

            plt.figure(figsize=(6, 4))
            sns.regplot(x=X_plot[feature], y=self.y, line_kws={"color": "red"})
            plt.title(f"–ó–≤'—è–∑–æ–∫: {feature} ‚Üí {self.y.name or '–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞'}")
            plt.xlabel(feature)
            plt.ylabel(self.y.name or "–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞")
            plt.grid(True)
            plt.tight_layout()
            plt.show()
