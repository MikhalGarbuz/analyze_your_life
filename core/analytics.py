from abc import ABC, abstractmethod
import pandas as pd
import matplotlib as plt
import seaborn as sbn
import statsmodels.api as sm
from statsmodels.miscmodels.ordinal_model import OrderedModel


class correlation:
    @staticmethod
    def kendall(data: pd.DataFrame, goal_variables: list[str]) -> pd.DataFrame:
        kendall_corr = data.corr(method='kendall')[goal_variables].drop(
            goal_variables)  # Deleting selfcorrelations and correlations with goal variables
        print("-----Kendal correlation matrix-------")
        print(kendall_corr, '\n')

        return kendall_corr

    @staticmethod
    def pearson(data: pd.DataFrame, goal_variables: list[str]) -> pd.DataFrame:
        pearson_corr = data.corr(method='pearson')[goal_variables].drop(
            goal_variables)  # Deleting selfcorrelations and correlations with goal variables
        print("-----Pearson correlation matrix-------")
        print(pearson_corr, '\n')

        return pearson_corr

class Regresion(ABC):
    @abstractmethod
    def predict(self, new_X: pd.DataFrame) -> pd.Series:
        pass

    @abstractmethod
    def coefficients(self) -> pd.DataFrame:
        pass


    @staticmethod
    def ordinal_logistic(X_variables: pd.DataFrame, Y_variable):
        return OrderedModel(Y_variable, X_variables, distr='logit').fit(method='bfgs')


class MultipleLinearRegression:
    def __init__(self, X: pd.DataFrame, y: pd.Series, add_polynomial_terms: bool = False):
        """
        –°—Ç–≤–æ—Ä—é—î —Ç–∞ —Ç—Ä–µ–Ω—É—î –º–æ–¥–µ–ª—å –º–Ω–æ–∂–∏–Ω–Ω–æ—ó –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.
        –Ø–∫—â–æ add_polynomial_terms = True ‚Äî –¥–æ–¥–∞—î –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ñ –æ–∑–Ω–∞–∫–∏.
        """
        if not isinstance(X, pd.DataFrame):
            raise TypeError("X –º–∞—î –±—É—Ç–∏ DataFrame")
        if not isinstance(y, (pd.Series, pd.DataFrame)):
            raise TypeError("y –º–∞—î –±—É—Ç–∏ Series –∞–±–æ DataFrame –∑ –æ–¥–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º")

        self.y = y.squeeze()
        self.feature_names = list(X.columns)

        # –î–æ–¥–∞–º–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—ñ –æ–∑–Ω–∞–∫–∏, —è–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ
        if add_polynomial_terms:
            for col in self.feature_names:
                X[f"{col}_squared"] = X[col] ** 2

        self.X = sm.add_constant(X)
        self.model = sm.OLS(self.y, self.X).fit()
        self.used_poly = add_polynomial_terms

    def summary(self):
        return self.model.summary()

    def predict(self, new_X: pd.DataFrame) -> pd.Series:
        if self.used_poly:
            for col in self.feature_names:
                new_X[f"{col}_squared"] = new_X[col] ** 2
        new_X = sm.add_constant(new_X)
        return self.model.predict(new_X)

    def coefficients(self) -> pd.DataFrame:
        df = pd.DataFrame({
            "Coef.": self.model.params,
            "P-value": self.model.pvalues
        })

        def interpret_row(row):
            coef = abs(row["Coef."])
            pval = row["P-value"]

            if coef > 1.0:
                strength = "üî¥ –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π"
            elif coef > 0.5:
                strength = "üü† –°–∏–ª—å–Ω–∏–π"
            elif coef > 0.2:
                strength = "üü° –ü–æ–º—ñ—Ä–Ω–∏–π"
            elif coef > 0.05:
                strength = "üîµ –°–ª–∞–±–∫–∏–π"
            else:
                strength = "‚ö™ –ú–∞–π–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

            if pval < 0.01:
                significance = "üî• –ù–∞–¥—ñ–π–Ω–∏–π"
            elif pval < 0.05:
                significance = "‚úÖ –ó–Ω–∞—á—É—â–∏–π"
            elif pval < 0.1:
                significance = "‚ö†Ô∏è –ù–∞ –º–µ–∂—ñ"
            else:
                significance = "‚ùå –ù–µ–Ω–∞–¥—ñ–π–Ω–∏–π"

            return pd.Series([strength, significance])

        df[["–°–∏–ª–∞ –≤–ø–ª–∏–≤—É", "–ó–Ω–∞—á—É—â—ñ—Å—Ç—å"]] = df.apply(interpret_row, axis=1)
        return df.round(4)

    def r_squared(self) -> float:
        return round(self.model.rsquared, 4)

    def plot_residuals(self):
        residuals = self.model.resid
        fitted = self.model.fittedvalues
        plt.figure(figsize=(6, 4))
        plt.scatter(fitted, residuals, alpha=0.7)
        plt.axhline(0, color="red", linestyle="--")
        plt.xlabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        plt.ylabel("–ó–∞–ª–∏—à–∫–∏")
        plt.title("–ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–∏—à–∫—ñ–≤")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def plot_feature_relationship(self, feature_name: str):
        if feature_name not in self.X.columns:
            raise ValueError(f"–û–∑–Ω–∞–∫–∞ '{feature_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ X")

        X_plot = self.X.drop(columns="const", errors="ignore")

        plt.figure(figsize=(6, 4))
        sbn.regplot(x=X_plot[feature_name], y=self.y, line_kws={"color": "red"})
        plt.title(f"–ó–≤'—è–∑–æ–∫: {feature_name} ‚Üí {self.y.name or '–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞'}")
        plt.xlabel(feature_name)
        plt.ylabel(self.y.name or "–¶—ñ–ª—å–æ–≤–∞ –∑–º—ñ–Ω–Ω–∞")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

class OrdinalLogisticRegression(Regresion):
    def __init__(self, X: pd.DataFrame, y: pd.Series):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –ø–æ—Ä—è–¥–∫–æ–≤–æ—ó –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.
        """
        self.X = X
        self.y = y
        self.model = OrderedModel(self.y, self.X, distr='logit')
        self.result = self.model.fit(method='bfgs', disp=False)  # suppress output

    def summary(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤–µ –∑–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤."""
        return self.result.summary()

    def predict(self, new_X: pd.DataFrame) -> pd.DataFrame:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –Ω–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –¥–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª–∞—Å—É."""
        return self.result.predict(new_X)

    def coefficients(self) -> pd.DataFrame:
        """–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ + P-values + —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –≤–ø–ª–∏–≤—É."""
        df = pd.DataFrame({
            "Coef.": self.result.params,
            "P-value": self.result.pvalues
        })

        def interpret(row):
            coef = abs(row["Coef."])
            pval = row["P-value"]

            if coef > 1.0:
                strength = "üî¥ –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π"
            elif coef > 0.5:
                strength = "üü† –°–∏–ª—å–Ω–∏–π"
            elif coef > 0.2:
                strength = "üü° –ü–æ–º—ñ—Ä–Ω–∏–π"
            elif coef > 0.05:
                strength = "üîµ –°–ª–∞–±–∫–∏–π"
            else:
                strength = "‚ö™ –ú–∞–π–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

            if pval < 0.01:
                significance = "üî• –ù–∞–¥—ñ–π–Ω–∏–π"
            elif pval < 0.05:
                significance = "‚úÖ –ó–Ω–∞—á—É—â–∏–π"
            elif pval < 0.1:
                significance = "‚ö†Ô∏è –ù–∞ –º–µ–∂—ñ"
            else:
                significance = "‚ùå –ù–µ–Ω–∞–¥—ñ–π–Ω–∏–π"

            return pd.Series([strength, significance])

        df[["–°–∏–ª–∞ –≤–ø–ª–∏–≤—É", "–ó–Ω–∞—á—É—â—ñ—Å—Ç—å"]] = df.apply(interpret, axis=1)
        return df.round(4)

    def thresholds(self) -> pd.DataFrame:
        """–û–∫—Ä–µ–º–æ –ø–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –º—ñ–∂ –∫–ª–∞—Å–∞–º–∏."""
        df = pd.DataFrame({
            "Threshold": self.result.params[self.result.model.k_exog:],
            "P-value": self.result.pvalues[self.result.model.k_exog:]
        })

        df = df.reset_index().rename(columns={"index": "–ö–ª–∞—Å –ø–µ—Ä–µ—Ö–æ–¥—É"})
        return df.round(4)

    def pseudo_r2(self) -> float:
        """–ê–Ω–∞–ª–æ–≥ R¬≤ ‚Äî McFadden Pseudo R-squared."""
        return round(self.result.prsquared, 4)

    def plot_class_probabilities(self, feature_name: str, fixed_values: dict, class_labels: list = None):
        """
        –ì—Ä–∞—Ñ—ñ–∫: –∑–º—ñ–Ω–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –∫–ª–∞—Å—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–¥–Ω—ñ—î—ó –æ–∑–Ω–∞–∫–∏.
        feature_name: –∑–º—ñ–Ω–Ω–∞, —è–∫—É –±—É–¥–µ–º–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ (x-–≤—ñ—Å—å)
        fixed_values: —ñ–Ω—à—ñ –∑–º—ñ–Ω–Ω—ñ ‚Äî –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—é
        class_labels: –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ ‚Äî –ø–µ—Ä–µ–ª—ñ–∫ –∑–Ω–∞—á–µ–Ω—å —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó
        """
        x_range = pd.Series([i * 0.1 for i in range(40)])  # –≤—ñ–¥ 0 –¥–æ 4
        probs = []

        for val in x_range:
            obs = fixed_values.copy()
            obs[feature_name] = val
            probs.append(self.result.predict(pd.DataFrame([obs])).iloc[0])

        probs_df = pd.DataFrame(probs, columns=class_labels if class_labels else self.result.model.endog.unique())
        plt.figure(figsize=(8, 5))
        for label in probs_df.columns:
            plt.plot(x_range, probs_df[label], label=f"–ö–ª–∞—Å {label}")
        plt.title(f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∫–ª–∞—Å—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ {feature_name}")
        plt.xlabel(feature_name)
        plt.ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()



