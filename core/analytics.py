import pandas as pd
import matplotlib as plt
import seaborn as sbn
import statsmodels.api as sm
from statsmodels.miscmodels.ordinal_model import OrderedModel


class correlation:
    @staticmethod
    def kendall(data: pd.DataFrame, goal_variables: list[str]) -> pd.DataFrame:
        kendall_corr = data.corr(method='kendall')[goal_variables].drop(
            goal_variables)  # Deleting selfcorrelations and correlations with goal variables
        print("-----Kendal correlation matrix-------")
        print(kendall_corr, '\n')

        return kendall_corr

    @staticmethod
    def pearson(data: pd.DataFrame, goal_variables: list[str]) -> pd.DataFrame:
        pearson_corr = data.corr(method='pearson')[goal_variables].drop(
            goal_variables)  # Deleting selfcorrelations and correlations with goal variables
        print("-----Pearson correlation matrix-------")
        print(pearson_corr, '\n')

        return pearson_corr

class regresion:
    @staticmethod
    def multiple_linear(X_variables: pd.DataFrame, Y_variable):
        X_variables_ols = sm.add_constant(X_variables)
        return sm.OLS(Y_variable, X_variables_ols).fit()

    @staticmethod
    def ordinal_logistic(X_variables: pd.DataFrame, Y_variable):
        return OrderedModel(Y_variable, X_variables, distr='logit').fit(method='bfgs')


import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt


class MultipleLinearRegression:
    def __init__(self, X: pd.DataFrame, y: pd.Series):
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –º–Ω–æ–∂–∏–Ω–Ω–æ—ó –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó.
        """
        if not isinstance(X, pd.DataFrame):
            raise TypeError("X –º–∞—î –±—É—Ç–∏ DataFrame")
        if not isinstance(y, (pd.Series, pd.DataFrame)):
            raise TypeError("y –º–∞—î –±—É—Ç–∏ Series –∞–±–æ DataFrame –∑ –æ–¥–Ω–∏–º —Å—Ç–æ–≤–ø—Ü–µ–º")

        self.X = sm.add_constant(X)
        self.y = y.squeeze()
        self.model = sm.OLS(self.y, self.X).fit()

    def summary(self):
        """
        –¢–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–æ–¥–µ–ª—ñ.
        """
        return self.model.summary()

    def predict(self, new_X: pd.DataFrame) -> pd.Series:
        """
        –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.
        """
        new_X = sm.add_constant(new_X)
        return self.model.predict(new_X)

    def coefficients(self) -> pd.DataFrame:
        """
        –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ + p-values + —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è.
        """
        df = pd.DataFrame({
            "Coef.": self.model.params,
            "P-value": self.model.pvalues
        })

        def interpret_row(row):
            coef = abs(row["Coef."])
            pval = row["P-value"]

            # —Å–∏–ª–∞ –≤–ø–ª–∏–≤—É
            if coef > 1.0:
                strength = "üî¥ –î—É–∂–µ —Å–∏–ª—å–Ω–∏–π"
            elif coef > 0.5:
                strength = "üü† –°–∏–ª—å–Ω–∏–π"
            elif coef > 0.2:
                strength = "üü° –ü–æ–º—ñ—Ä–Ω–∏–π"
            elif coef > 0.05:
                strength = "üîµ –°–ª–∞–±–∫–∏–π"
            else:
                strength = "‚ö™ –ú–∞–π–∂–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"

            # –∑–Ω–∞—á—É—â—ñ—Å—Ç—å
            if pval < 0.01:
                significance = "üî• –ù–∞–¥—ñ–π–Ω–∏–π (p < 0.01)"
            elif pval < 0.05:
                significance = "‚úÖ –ó–Ω–∞—á—É—â–∏–π (p < 0.05)"
            elif pval < 0.1:
                significance = "‚ö†Ô∏è –ù–∞ –º–µ–∂—ñ (p < 0.1)"
            else:
                significance = "‚ùå –ù–µ–Ω–∞–¥—ñ–π–Ω–∏–π (p > 0.1)"

            return pd.Series([strength, significance])

        df[["–°–∏–ª–∞ –≤–ø–ª–∏–≤—É", "–ó–Ω–∞—á—É—â—ñ—Å—Ç—å"]] = df.apply(interpret_row, axis=1)
        return df.round(4)

    def plot_residuals(self):
        """
        –ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–∏—à–∫—ñ–≤.
        """
        residuals = self.model.resid
        fitted = self.model.fittedvalues
        plt.figure(figsize=(6, 4))
        plt.scatter(fitted, residuals, alpha=0.7)
        plt.axhline(0, color="red", linestyle="--")
        plt.xlabel("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è")
        plt.ylabel("–ó–∞–ª–∏—à–∫–∏")
        plt.title("–ì—Ä–∞—Ñ—ñ–∫ –∑–∞–ª–∏—à–∫—ñ–≤")
        plt.grid(True)
        plt.tight_layout()
        plt.show()

    def r_squared(self) -> float:
        """
        R¬≤ (–∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–µ—Ç–µ—Ä–º—ñ–Ω–∞—Ü—ñ—ó).
        """
        return round(self.model.rsquared, 4)






